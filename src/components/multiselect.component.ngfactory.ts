/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './multiselect.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '../services/service';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/http/src/http';
import * as import11 from 'primeng/components/multiselect/multiselect';
import * as import12 from 'primeng/components/dom/domhandler';
import * as import13 from '../../node_modules/primeng/components/multiselect/multiselect.ngfactory';
import * as import14 from '../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import15 from '../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import18 from '@angular/forms/src/directives/control_value_accessor';
import * as import19 from '@angular/forms/src/directives/ng_model';
import * as import20 from '@angular/forms/src/directives/ng_control';
import * as import21 from '@angular/forms/src/directives/ng_control_status';
export class Wrapper_MultiSelectComponent {
  /*private*/ _eventHandler:Function;
  context:import0.MultiSelectComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.MultiSelectComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_index(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.index = currValue;
      this._expr_0 = currValue;
    }
  }
  check_clazzName(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.clazzName = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_MultiSelectComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_MultiSelectComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.MultiSelectComponent>;
  _Service_0_3:import6.Service;
  _MultiSelectComponent_0_4:Wrapper_MultiSelectComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MultiSelectComponent_Host0,renderType_MultiSelectComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'inputText',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_MultiSelectComponent0(this.viewUtils,this,0,this._el_0);
    this._Service_0_3 = new import6.Service(this.injectorGet(import10.Http,this.parentIndex));
    this._MultiSelectComponent_0_4 = new Wrapper_MultiSelectComponent(this._Service_0_3);
    this.compView_0.create(this._MultiSelectComponent_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._MultiSelectComponent_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.Service) && (0 === requestNodeIndex))) { return this._Service_0_3; }
    if (((token === import0.MultiSelectComponent) && (0 === requestNodeIndex))) { return this._MultiSelectComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MultiSelectComponent_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MultiSelectComponentNgFactory:import9.ComponentFactory<import0.MultiSelectComponent> = new import9.ComponentFactory<import0.MultiSelectComponent>('inputText',View_MultiSelectComponent_Host0,import0.MultiSelectComponent);
const styles_MultiSelectComponent:any[] = ([] as any[]);
var renderType_MultiSelectComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_MultiSelectComponent,{});
export class View_MultiSelectComponent0 extends import2.AppView<import0.MultiSelectComponent> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _text_7:any;
  _text_8:any;
  _el_9:any;
  _text_10:any;
  _el_11:any;
  compView_11:import2.AppView<import11.MultiSelect>;
  _DomHandler_11_3:import12.DomHandler;
  _MultiSelect_11_4:import13.Wrapper_MultiSelect;
  _NG_VALUE_ACCESSOR_11_5:any[];
  _NgModel_11_6:import14.Wrapper_NgModel;
  _NgControl_11_7:any;
  _NgControlStatus_11_8:import15.Wrapper_NgControlStatus;
  _text_12:any;
  _text_13:any;
  _text_14:any;
  /*private*/ _expr_22:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MultiSelectComponent0,renderType_MultiSelectComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
    this._expr_22 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','row'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'div',new import3.InlineArray2(2,'class','col-md-2'),(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'    \n                ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,this._el_3,'label',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_6 = this.renderer.createText(this._el_5,'',(null as any));
    this._text_7 = this.renderer.createText(this._el_3,'\n            ',(null as any));
    this._text_8 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._el_9 = import3.createRenderElement(this.renderer,this._el_1,'div',new import3.InlineArray2(2,'class','col-md-10'),(null as any));
    this._text_10 = this.renderer.createText(this._el_9,'    \n                ',(null as any));
    this._el_11 = import3.createRenderElement(this.renderer,this._el_9,'p-multiSelect',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_11 = new import13.View_MultiSelect0(this.viewUtils,this,11,this._el_11);
    this._DomHandler_11_3 = new import12.DomHandler();
    this._MultiSelect_11_4 = new import13.Wrapper_MultiSelect(new import16.ElementRef(this._el_11),this._DomHandler_11_3,this.renderer,this.parentView.injectorGet(import17.IterableDiffers,this.parentIndex));
    this._NG_VALUE_ACCESSOR_11_5 = [this._MultiSelect_11_4.context];
    this._NgModel_11_6 = new import14.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_11_5);
    this._NgControl_11_7 = this._NgModel_11_6.context;
    this._NgControlStatus_11_8 = new import15.Wrapper_NgControlStatus(this._NgControl_11_7);
    this.compView_11.create(this._MultiSelect_11_4.context);
    this._text_12 = this.renderer.createText(this._el_9,'            \n            ',(null as any));
    this._text_13 = this.renderer.createText(this._el_1,'            \n        ',(null as any));
    this._text_14 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_11,new import3.InlineArray4(4,'ngModelChange',(null as any),'onChange',(null as any)),this.eventHandler(this.handleEvent_11));
    this._MultiSelect_11_4.subscribe(this,this.eventHandler(this.handleEvent_11),true);
    this._NgModel_11_6.subscribe(this,this.eventHandler(this.handleEvent_11),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._text_7,
      this._text_8,
      this._el_9,
      this._text_10,
      this._el_11,
      this._text_12,
      this._text_13,
      this._text_14
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.DomHandler) && (11 === requestNodeIndex))) { return this._DomHandler_11_3; }
    if (((token === import11.MultiSelect) && (11 === requestNodeIndex))) { return this._MultiSelect_11_4.context; }
    if (((token === import18.NG_VALUE_ACCESSOR) && (11 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_11_5; }
    if (((token === import19.NgModel) && (11 === requestNodeIndex))) { return this._NgModel_11_6.context; }
    if (((token === import20.NgControl) && (11 === requestNodeIndex))) { return this._NgControl_11_7; }
    if (((token === import21.NgControlStatus) && (11 === requestNodeIndex))) { return this._NgControlStatus_11_8.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_11_0_0:any = this.context.itens;
    this._MultiSelect_11_4.check_options(currVal_11_0_0,throwOnChange,false);
    this._MultiSelect_11_4.ngDoCheck(this,this._el_11,throwOnChange);
    const currVal_11_1_0:any = this.context.selectedItem;
    this._NgModel_11_6.check_model(currVal_11_1_0,throwOnChange,false);
    this._NgModel_11_6.ngDoCheck(this,this._el_11,throwOnChange);
    this._NgControlStatus_11_8.ngDoCheck(this,this._el_11,throwOnChange);
    const currVal_22:any = import3.inlineInterpolate(1,'',this.context.name,'');
    if (import3.checkBinding(throwOnChange,this._expr_22,currVal_22)) {
      this.renderer.setText(this._text_6,currVal_22);
      this._expr_22 = currVal_22;
    }
    this._NgControlStatus_11_8.checkHost(this,this.compView_11,this._el_11,throwOnChange);
    this.compView_11.internalDetectChanges(throwOnChange);
    if (!throwOnChange) {
      if ((this.numberOfChecks === 0)) { this._MultiSelect_11_4.context.ngAfterViewInit(); }
      this._MultiSelect_11_4.context.ngAfterViewChecked();
    }
  }
  destroyInternal():void {
    this.compView_11.destroy();
    this._MultiSelect_11_4.ngOnDestroy();
    this._NgModel_11_6.ngOnDestroy();
  }
  handleEvent_11(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.selectedItem = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'onChange')) {
      const pd_sub_1:any = ((<any>this.context.setValue($event.value)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}